continue
package_params[:photographer_id]
package_params
continue
Package.all.select{ |p| p.photographer_id === 2 }
Package.first
Package.all.select{ |p| p.photographer_id === 1 }
params
continue
Photographer.find_by(custom_url: photographer_params[:custom_url][1..-1])
photographer_params[:custom_url][1..-1]
url
@photographer
continue
@photographers
@photographers.map do |p|  p.custom_url  end
@photographers
continue
photographer_params[:custom_url].split("/")
photographer_params[:custom_url]
continue
@photographer = Photographer.find_by(custom_url: url[1..-1])
url[1..-1]
url = photographer_params[:custom_url]
photographer_params[:custom_url]
photographer_params.custom_url
photographer_params
continue
params
continue
decoded_token[0]['photographer_id']
exit
decoded_token[0]['photographer_id']
exit
current_photographer
decoded_token[0]['photographer_id']
Photographer.find(decoded_token[0]['photographer_id'])
@photographer = Photographer.find(decoded_token[0]['photographer_id'])
exit
dt[0]['photographer_id']
dt[0][photographer_id]
dt
dt = JWT.decode(token, "sqlit", true, { algorithm: "HS256" })
decoded_token[photographer_id]
decoded_token.photographer_id
decoded_token
decoded_token = JWT.decode(token, "sqlit", true, { algorithm: "HS256" })
JWT.decode(token, "sqlit", true, { algorithm: "HS256" })
token = request.headers["Authorization"]
auth_header.split(" ")[1]
request.headers["Authorization"]
decoded_token
decode_token
auth_header
current_photographer
current_user
headers
params
exit
token = encode_token({ photographer_id: @photographer.id })
@photographer.authenticate(photographer_login_params[:password])
@photographer
